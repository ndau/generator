{{define "decompose"}}
    // template decompose: {{.Name}} ({{.Type}}->{{.Expr}})
    {{- if .IsPrimitive}}
    {{- else if .IsSlice}}
        {{template "slice" .}}
    {{- else if .IsSet}}
        {{template "set" .}}
    {{- else if .IsPointer }}
        {{template "pointer" .}}
    {{- else if .IsTextMarshaler }}
        {{template "textmarshaler" .}}
    {{- else}}
        {{template "nomsmarshaler" .}}
    {{- end}}
{{end}}
{{define "decompose_value"}}
    {{- if .IsPrimitive}}
        {{- .MarshalPrimitive .Name}}
    {{- else if .IsSlice}}
        {{- template "slice_value" .}}
    {{- else if .IsSet}}
        {{- template "set_value" .}}
    {{- else if .IsPointer }}
        {{- template "pointer_value" .}}
    {{- else if .IsTextMarshaler }}
        {{- template "textmarshaler_value" .}}
    {{- else}}
        {{- template "nomsmarshaler_value" .}}
    {{- end -}}
{{end}}

{{define "nomsmarshaler" -}}
    // template nomsmarshaler: {{.Name}}
    {{.LocalName}}Value, err := {{.Name}}.MarshalNoms(vrw)
    if err != nil {
        return nil, errors.Wrap(err, "MarshalNoms->{{.Name}}.MarshalNoms")
    }
{{- end}}
{{define "nomsmarshaler_value"}}{{.LocalName}}Value{{end}}
{{define "pointer" -}}
    // template pointer:  {{.Name}}
    var {{.LocalName}}Unptr nt.Value
    if {{.Name}} == nil {
        {{.LocalName}}Unptr = {{(.LocalName | printf "%sUnptr" | .Inner).MarshalZero}}
    } else {
        {{template "decompose" (.Name | printf "%s" | .Inner)}}
        {{.LocalName}}Unptr = {{template "decompose_value" (.Name | printf "%s" | .Inner)}}
    }
{{- end}}
{{define "pointer_value"}}{{.LocalName}}Unptr{{end}}
{{define "set" -}}
    {{.LocalName}}Items := make([]nt.Value, 0, len({{.Name}}))
	for {{.LocalName}}Item := range {{.Name}} {
		{{.LocalName}}Items = append(
			{{.LocalName}}Items,
			nt.String({{.LocalName}}Item),
		)
	}
{{- end}}
{{define "set_value"}}nt.NewSet(vrw, {{.LocalName}}Items...){{end}}
{{define "slice" -}}
    // template slice: {{.Name}}
    {{.LocalName}}Items := make([]nt.Value, 0, len({{.Name}}))
	for _, {{.LocalName}}Item := range {{.Name}} {
		{{template "decompose" (.LocalName | printf "%sItem" | .Inner)}}
		{{.LocalName}}Items = append(
			{{.LocalName}}Items,
            {{template "decompose_value" (.LocalName | printf "%sItem" | .Inner)}},
		)
	}
	{{.LocalName}}Value := nt.NewList(vrw, {{.LocalName}}Items...)
{{- end}}
{{define "slice_value"}}{{.LocalName}}Value{{end}}
{{define "textmarshaler" -}}
    // template textmarshaler: {{.Name}}
    {{.LocalName}}String, err := {{.Name}}.MarshalText()
    if err != nil {
        return nil, errors.Wrap(err, "MarshalNoms->{{.Name}}.MarshalText")
    }
{{- end}}
{{define "textmarshaler_value"}}nt.String({{.LocalName}}String){{end}}

{{define "marshal_noms"}}
var {{.Type | LowerFirst}}StructTemplate nt.StructTemplate

func init() {
	{{.Type | LowerFirst}}StructTemplate = nt.MakeStructTemplate("{{.Type}}", []string{
        {{range .SortedFields -}}
            "{{.LocalName}}",
        {{end -}}
	})
}

// MarshalNoms implements noms/go/marshal.Marshaler
func (x {{.Type}}) MarshalNoms(vrw nt.ValueReadWriter) ({{.Type | LowerFirst}}Value nt.Value, err error) {
    {{- range .Fields}}
        // {{.Name}} ({{.Type}}->{{.Expr}}) is primitive: {{.IsPrimitive}}
        {{if not .IsPrimitive}}
            {{- template "decompose" .}}
        {{- end}}
    {{- end}}

	return {{.Type | LowerFirst}}StructTemplate.NewStruct([]nt.Value{
        {{range .SortedFields -}}
            // {{.Name}} ({{.Type}})
            {{if .IsPrimitive}}
                {{.MarshalPrimitive (printf "%s" .Name)}}
            {{- else -}}
                {{- template "decompose_value" .}}
            {{- end}},
        {{end -}}
	}), nil
}

var _ marshal.Marshaler = (*{{.Type}})(nil)

{{end}}
