{{define "decompose"}}
    {{if IsSlice . -}}
        {{template "slice" .}}
    {{- else if IsPointer .}}
        {{template "pointer" .}}
    {{- else if IsTextMarshaler .}}
        {{template "textmarshaler" .}}
    {{- else if IsNomsMarshaler .}}
        {{template "nomsmarshaler"}}
    {{- else}}
        {{ Primitive .}}
    {{- end}}
{{end}}
{{define "decompose_value"}}
    {{if IsSlice . -}}
        {{template "slice_value" .}}
    {{- else if IsPointer .}}
        {{template "pointer_value" .}}
    {{- else if IsTextMarshaler .}}
        {{template "textmarshaler_value" .}}
    {{- else if IsNomsMarshaler .}}
        {{template "nomsmarshaler_value"}}
    {{- else}}
        {{.}}
    {{- end}}
{{end}}
{{define "slice" -}}
    {{. | LowerFirst}}Items := make([]nt.Value, 0, len(i.{{.}}))
	for _, {{. | LowerFirst}}Item := range i.{{.}} {
		{{template "decompose" (. | LowerFirst | printf "%sItem")}}
		{{.Name | LowerFirst}}Items = append(
			{{.Name | LowerFirst}}Items,
            {{template "decompose_value" (. | LowerFirst | printf "%sItem")}},
		)
	}
	{{. | LowerFirst}}Value := nt.NewList(vrw, {{. | LowerFirst}}Items...)
{{- end}}
{{define "slice_value" -}}
    {{. | LowerFirst}}Value
{{- end}}
{{define "textmarshaler" -}}
    {{. | LowerFirst}}String, err := {{. | LowerFirst}}.MarshalText()
    if err != nil {
        return nil, err
    }
{{- end}}
{{define "textmarshaler_value" -}}
    {{. | LowerFirst}}String
{{- end}}
{{define "nomsmarshaler" -}}
    {{. | LowerFirst}}Value, err := {{. | LowerFirst}}.MarshalNoms(vrw)
    if err != nil {
        return nil, err
    }
{{- end}}
{{define "nomsmarshaler_value" -}}
    {{. | LowerFirst}}Value
{{- end}}
{{define "pointer" -}}
    var {{. | LowerFirst}}Value nt.Value
    if i.{{.}} == nil {
        {{template "decompose" (Zero .)}}
        {{. | LowerFirst}}Unptr := {{template "decompose_value" (Zero .)}}
    } else {
        {{template "decompose" .}}
        {{. | LowerFirst}}Unptr := {{template "decompose_value" .}}
    }
{{- end}}
{{define "pointer_value" -}}
    {{. | LowerFirst}}Unptr
{{- end}}
{{define "marshal_noms"}}
var {{.Type | LowerFirst}}StructTemplate nt.StructTemplate

func init() {
	{{.Type | LowerFirst}}StructTemplate = nt.MakeStructTemplate("{{.Type}}", []string{
        {{range .SortedFields -}}
        {{.Name}},
        {{- end}}
	})
}

// MarshalNoms implements noms/go/marshal.Marshaler
func (ad {{.Type}}) MarshalNoms(vrw nt.ValueReadWriter) ({{.Type | LowerFirst}}Value nt.Value, err error) {
    {{range .Fields -}}
    {{if .NeedsTransform}}
    {{template "decompose" .Name}}
    {{- end}}
    {{- end}}

	return {{.Type | LowerFirst}}StructTemplate.NewStruct([]nt.Value{
        {{range .SortedFields -}}
        {{if .NeedsTransform}}{{template "decompose_value" .Name}}{{else}}{{Primitive .Name}}{{end}}
        {{- end}}
	}), nil
}

var _ marshal.Marshaler = (*{{.Type}})(nil)
{{end}}
