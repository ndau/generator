package main

import (
	"fmt"
	"os"

	"github.com/oneiro-ndev/generator/pkg/txgen"
	"github.com/oneiro-ndev/metanode/pkg/meta/transaction"
	"github.com/oneiro-ndev/ndau/pkg/ndau"
	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	math "github.com/oneiro-ndev/ndaumath/pkg/types"
)

func check(err error) {
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}

func generate(template, output string, context *txgen.Context) {
	tmpl, err := txgen.ParseTemplate(template)
	check(err)
	check(txgen.ApplyTemplate(tmpl, context, output))
}

func main() {
	context, err := txgen.MakeContextWithExamples(transactions())
	check(err)

	// otherwise, go through the whole list
	type to struct {
		t string
		o string
	}

	tos := []to{
		{txgen.SignableBytesTestTemplatePath, txgen.SignableBytesTestOutputPath},
		{txgen.JSTestTemplatePath, txgen.JSTestOutputPath},
	}

	for _, to := range tos {
		generate(to.t, to.o, context)
	}
}

func transactions() []metatx.Transactable {
	{{- range .Transactions}}
	{{- range .Fields}}
	{{- if .FallibleLiteral}}
	{{.LiteralName}}, err := {{.Literal}}
	check(err)
	{{- end}}{{end}}{{end}}

	return []metatx.Transactable{
	{{- range .Transactions}}
		&ndau.{{.Name}}{
			{{- range .Fields}}
			{{.Name}}: {{if .FallibleLiteral}}{{if .IsSlice}}{{.Type}}{{"{"}}{{end}}{{if .PointerLiteral}}*{{end}}{{.LiteralName}}{{if .IsSlice}}{{"}"}}{{end}}{{else}}{{if .PointerLiteral}}*{{end}}{{.Literal}}{{end}},
			{{- end}}
		},
	{{- end}}
	}
}
