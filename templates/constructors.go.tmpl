package ndau

// This file generated by txgen: https://github.com/oneiro-ndev/generator/pkg/txgen
// DO NOT EDIT

import (
	"github.com/oneiro-ndev/ndaumath/pkg/address"
	"github.com/oneiro-ndev/ndaumath/pkg/signature"
	math "github.com/oneiro-ndev/ndaumath/pkg/types"
)


{{range $tx := .Transactions -}}
// New{{.Name}} creates a new {{.Name}} transactable
//
// If signing keys are present, the new transactable is signed with all of them
{{- if not .Multisig}}
//
// Note: though this constructor supports an arbitrary number of signing keys,
// {{.Name}} supports only a single signature. Any keys set beyond the
// first are ignored.
{{- end}}
func New{{.Name}}(
    {{- range $field := .Fields}}{{if not .IsSignature}}
    {{.Name | Lower}} {{.Type}},
    {{- end}}{{end}}
	signingKeys ...signature.PrivateKey,
) *{{.Name}} {
	tx := &{{.Name}}{
        {{- range $field := .Fields}}{{if not .IsSignature}}
        {{.Name}}: {{.Name | Lower}},
        {{- end}}{{end}}
	}
    if len(signingKeys) > 0 {
	    bytes := tx.SignableBytes()
        {{- if $tx.Multisig}}
        for _, key := range signingKeys {
            tx.Signatures = append(tx.Signatures, key.Sign(bytes))
        }
        {{- else}}
        tx.Signature = signingKeys[0].Sign(bytes)
        {{- end}}
    }

	return tx
}

{{end}}
